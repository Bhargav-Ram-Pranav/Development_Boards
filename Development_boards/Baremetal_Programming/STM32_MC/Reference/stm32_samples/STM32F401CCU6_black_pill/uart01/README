
See the previous level README for schematic and programmers reference
information.

PA9 is USART1_TX alternate function 1
PA10 is USART1_RX alternate function 1

PA2 is USART2_TX alternate function 1
PA3 is USART2_RX alternate function 1

This example uses USART2 instead of USART1 because USART2 is by default
tied to the debug side of the board, the debug side of the board has
a virtual com port.  So basically a dumb terminal program (minicom,
hyperterm, teraterm, putty) and no additional hardware you can
interact with the microcontrollers uart.  This is a very cool feature
that you dont often see, usually you have to buy and wire up extra
hardware for this.

This example uses the external 25MHz clock to run the microcontroller
at 25MHz.  This gives us a more accurate clock than the internal 16MHz
clock which would/should mostly work as well if you prefer.

The GPIO and UART are enabled, the PA2/3 pins are switched to alternate
function 7 which is USART2 rx and tx.

This is a TX only example, another example will cover RX.  No interrupts
are required/used for this example.

The uart is setup for 115200 baud, this chip uses a fractional baud
rate divisor.  The OVER8=0 which means 16x oversampling is used so

25000000Hz/(16*115200) = 13.56

The mantissa is then 13.  The fraction is 4 bits, 2^4 = 16 so
0.56*16 = 9.

So our divisor is 13+9/16th  13.5625

This example blasts the characters 0123456701234567... forever as
fast as it can.  If using minicom you need to alt-a then w to switch
to wraparound mode so you can see them.
