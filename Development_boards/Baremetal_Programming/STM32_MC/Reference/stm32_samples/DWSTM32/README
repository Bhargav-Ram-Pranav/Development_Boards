
I am using a part in the same family as the NUCLEO-F031K6, so any of
the examples here should work on that board as well, other than the
pinouts are different, and you can simply drag and drop the .bin
file onto the virtual flash drive with the NUCLEO board.

So I had bought a handful or so STM32F031F4P6 parts, loose parts not
on a development/eval board.  The least featured stm32 I could find in
a tssop package (something I/you/we could hand solder).

Then for the STM32F031F4P6 examples I put them on a generic breakout that
I found on ebay for about a buck a board.

I made my own breakout board under a buck a board at oshpark.  File
named breakout_too.brd.  (and pdf)

And I made a more complicated board fairly cheap and built a few of
those boards.  The DWSTM32.brd file you can open with eagle and see the
board (go to oshpark and make some yourself).  I have a pdf here as
well.  I am currently using 130 Ohm resistors with the leds and 10K for
the pull up/down.

Not obvious necessarily but the top pins are for my favorite ftdi board

https://www.sparkfun.com/products/retired/718

Now retired, not that it is an exceptional board, just that I bought
a handful of them and have them always within arms reach.

Bare minimum you only need to hookup GND TX RX and VCC.  Can use any
ftdi or other breakout board or similar cable that you might use on a
raspberry pi or other 3.3V board.  Like the STM32F031F4P6 examples
you can certainly use an SWD Jtag solution like an stlink.

       GND TX RX VCC

BOOT0                SWCLK
PF0                  SWDIO
PF1                  RX (USB D+)
NRST                 TX (USB D-)
VDDA                 VCC
PA0                  GND
PA1                  PB1
PA2                  PA7
PA3                  PA6
PA4 (led)            PA5 (led)

All this breakout basically did was what I did on the STM32F031F4P6
samples grounding some stuff, wiring some stuff to 3.3, etc.  I put a
reset and boot0 button on here making that so much easier.  Hold the
boot0 and press reset and you are in the ST bootloader, no jtag
required.

I work with a number of folks that can do good soldering work, but
wanted to learn on my own.  My first SMT IC was done by reading this

http://goodfet.sourceforge.net/construction/

And I made mistakes.  When he says run across, you need to not use
any friction the pins bend really easy, esp when hot.  First time
I tried it I slid the wick across and bent all the pins on one side.
Oops...buy multiples of everything, expect to mess up.  I simply
hold the wick over the pins, press down hold for a while for it to
absorb and lift up in the air.  No sliding around.

I still need to read up on the right way to know the orientation of
the leds.  I got lazy and put one one way, one the other, the one
that lit up was right, removed the other and put another on the
same way as the working one.  I have access to handheld meters that
can test the diode and it lights up when you get it right.

For these samples you will want the documentation on the STM32F031F4P6
part from ST for information on how to write programs for the part.

Erase is actually the first example, erases the part using the internal
bootloader, sign of life for the board.

Then uloader takes the blinker01 flash output and programs it into the
part.

And the real loader is in the progstm directory.  Like the two
before but it takes a flash.bin file as a command line.  I personally
use this one for all of these examples.  Use the flash.bin binary not
the sram.bin binary.

For all three of these press and hold boot0, then press and release
reset, then release boot0 to put it in the internal bootloader.  After
using progstm to program the flash, press and release reset without
touching boot0 and it will start running your program.  Start with
blinker01.

The flash and sram binaries are slightly different.  The issue is
that ARM switched from the full sized 32 bit processors scheme of
the reset vector is an instruction you execute (a branch basically)
but the cortex-m processors use a traditional table of addresses.
So on flash you have to boot using the table of addresses and that is
the first thing.  For sram, you dont have to but what I have is the
first instruction in the binary is the first one you want to execute.
The sram version is for use with jtag (maybe later with my own
bootloader will see), doesnt make sense otherwise.  You could arguably
know the offset where the reset vector code lives and start the
jtag execution there, but the second difference is the flash version
is linked for the flash address space and sram for the sram address
space.  So blinker01 and other examples will have both sram and flash
versions.

For using the jtag, see the STM32F031F4P6 directory README.

I built a charlieplexed board and have some examples.  See led.brd in
this directory.  Started with a sparkfun board and cut it down to
a quarter the size.  Using the same leds and resistors I used on the
stm32 board.


For parts like the STM32F042F4P6 which has usb you can connect as
above (USB D+/-) and use dfu-util (use boot0 to reset into the
bootloader).


dfu-util -a 0 -s 0x08000000 -D blinker01/blinker01.gcc.thumb.flash.bin


Opening DFU capable USB device...
ID 0483:df11
Run-time device DFU version 011a
Claiming USB DFU Interface...
Setting Alternate Setting #0 ...
Determining device status: state = dfuERROR, status = 10
dfuERROR, clearing status
Determining device status: state = dfuIDLE, status = 0
dfuIDLE, continuing
DFU mode device DFU version 011a
Device returned transfer size 2048
DfuSe interface name: "Internal Flash  "
Downloading to address = 0x08000000, size = 264
Download	[=========================] 100%          264 bytes
Download done.
File downloaded successfully


Then reset with boot0 set for application...





