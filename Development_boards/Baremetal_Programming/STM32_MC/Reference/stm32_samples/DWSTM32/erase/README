
See the README in the above directory for more information on
documentation for this board.

In particular AN2606 and AN3155 were used to develop/verify this
program.

For this board use RX and TX pins.  TTL 3.3V levels not RS232.

Press and hold BOOT0 then press and release RESET, then release BOOT0
to boot the part into the internal bootloader.

We detect the bootloader by sending a 0x7F byte.  The bootloader detects
our baud rate from that and returns 0x79.  You can do this only once
per reset or power cycle of the part, after this first time detect the
bootloader is now waiting for non-0x7F commands (kinda dumb they should
have just added a few lines of code to send 0x79 back again).

In progstm the detect_chip() function does this write 0x7F wait for 0x79
thing.

AN3155 shows flow charts for each of the commands.  For each command
there is a command byte, optional data then a check byte that is an
xor of all the other bytes.

For the get command the command byte is 0x00 and there are no other bytes
so 0x00^0xFF is 0xFF so we send 0x00,0xFF.

Then we wait for ACK(0x79) or NACK(0x1F).

The first byte we get after ACK is the number of bytes-1.
And for the GET command the list of bytes is the list of commands
that this version of bootloader accepts

79  ACK
0B  number of bytes-1  (0xB+1 = 12 bytes)
31 bootloader version
00 get
01 get version and read protection status
02 get ID
11 Read Memory
21 Go
31 Write Memory
44 Extended Erase
63 Write Protect
73 Write Unprotect
82 Readout Protect
92 Readout Unprotect

Now a chip will either have Erase or Extended Erase but not both so the
docs say.

The difference is the parameters, Erase is a one byte parameter Extended
is a two byte parameter.

The part I have indicated above as v3.1 of the bootloader.

I know it is painful but my program requires you modify the ser_open
function in ser.c to change the serial port.  I take care of the baud
rate (57600) and parity and everyting else (this is for linux/unix btw
not windows).  This serial code has been running as is for many many
years, I think longer than the 2000 date I have on it.

unsigned char ser_open ( void )
{
  struct termios options;

  ser_hand=open("/dev/ttyUSB0",O_RDWR|O_NOCTTY|O_NDELAY);
                ^^^^^^^^^^^^^

This is not some generic command line tool with switches.  This is a
sign of life thing for this board, if you even detect the chip and its
bootloader it is alive.  I go ahead and do an extended erase too.

Other versions of this loader (different directories in this repo) will
likely not be any more generic but will be able to program as well
as erase.

My complete output for this part looks like this

./progstm
port opened
detect_chip()
chip found
get()
79 0B
31 bootloader version
00 get
01 get version and read protection status
02 get ID
11 Read Memory
21 Go
31 Write Memory
44 Extended Erase
63 Write Protect
73 Write Unprotect
82 Readout Protect
92 Readout Unprotect
getverpstat()
0x31 version
0x00 read prot disables
0x00 read prot enables
getid()
79 01 04 44 79
erase_flash()
erased
